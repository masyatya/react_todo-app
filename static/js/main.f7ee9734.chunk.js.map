{"version":3,"sources":["store/todos.js","components/TodoItem.js","components/TodosList.js","components/TodoForm.js","components/const.js","components/TodosFilter.js","store/index.js","TodoApp.js","index.js"],"names":["deleteTodo","todoId","type","changeTitle","title","initialState","todos","TodoItem","id","completed","dispatch","useDispatch","useState","isEditing","setIsEditing","titleTodo","setTitleTodo","className","classNames","editing","onDoubleClick","checked","onChange","onClick","value","event","target","onKeyUp","trimTitle","trim","keyCode","autoFocus","onBlur","TodosList","map","todo","key","TodoForm","inputValue","setInputValue","onSubmit","preventDefault","handleSubmit","placeholder","FILTER","TodosFilter","selectType","setSelectType","href","getTodos","state","selectorsTodos","getActiveTodos","filter","getCompletedTodos","getActiveTodosLength","length","isAllCompleted","every","rootReducer","combineReducers","action","Date","persistedState","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","TodoApp","useSelector","selectors","activeTodosLength","todosActive","todosCompleted","filterTodos","changeCompletedAll","htmlFor","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7ee9734.chunk.js","sourcesContent":["const ADD_TODO = 'ADD_TODO';\nconst DELETE_TODO = 'DELETE_TODO';\nconst DELETE_COMPLETED = 'DELETE_COMPLETED';\nconst CHANGE_COMPLETED_TODO = 'CHANGE_COMPLETED_TODO';\nconst CHANGE_COMPLETED_ALL = 'CHANGE_COMPLETED_ALL';\nconst CHANGE_TITLE = 'CHANGE_TITLE';\n\nexport const addTodo = title => ({ type: ADD_TODO, title });\nexport const deleteTodo = todoId => ({ type: DELETE_TODO, todoId });\nexport const deleteCompletedTodos = () => ({ type: DELETE_COMPLETED });\nexport const changeTitle = (title, todoId) => ({\n  type: CHANGE_TITLE,\n  title,\n  todoId,\n});\nexport const changeCompletedAll = isAllCompleted => ({\n  type: CHANGE_COMPLETED_ALL,\n  isAllCompleted,\n});\nexport const changeCompletedTodo = todoId => ({\n  type: CHANGE_COMPLETED_TODO,\n  todoId,\n});\n\nexport const getTodos = state => state.todos;\nexport const getActiveTodos = state => (\n  state.todos.filter(todo => !todo.completed)\n);\nexport const getCompletedTodos = state => (\n  state.todos.filter(todo => todo.completed)\n);\n\nexport const getActiveTodosLength = state => (\n  state.todos.filter(todo => !todo.completed).length\n);\nexport const isAllCompleted = state => (\n  state.todos.every(todo => todo.completed)\n);\n\nconst initialState = {\n  todos: [],\n};\n\nexport const todosReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, {\n          id: +new Date(),\n          title: action.title,\n          completed: false,\n        }],\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.todoId),\n      };\n\n    case DELETE_COMPLETED:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => !todo.completed),\n      };\n\n    case CHANGE_COMPLETED_TODO:\n      return {\n        ...state,\n        todos: [...state.todos.map((todo) => {\n          if (todo.id === action.todoId) {\n            return {\n              ...todo,\n              completed: !todo.completed,\n            };\n          }\n\n          return todo;\n        })],\n      };\n\n    case CHANGE_COMPLETED_ALL:\n      return {\n        ...state,\n        todos: [...state.todos.map(todo => ({\n          ...todo,\n          completed: action.isAllCompleted,\n        }))],\n      };\n\n    case CHANGE_TITLE:\n      return {\n        ...state,\n        todos: [...state.todos.map((todo) => {\n          if (todo.id !== action.todoId) {\n            return todo;\n          }\n\n          return { ...todo, title: action.title };\n        })],\n      };\n\n    default:\n      return state;\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { changeCompletedTodo, deleteTodo, changeTitle } from '../store/todos';\n\nexport const TodoItem = ({\n  id,\n  title,\n  completed,\n}) => {\n  const dispatch = useDispatch();\n  const [isEditing, setIsEditing] = useState(false);\n  const [titleTodo, setTitleTodo] = useState(title);\n\n  const handleKey = (event) => {\n    const trimTitle = titleTodo.trim();\n\n    if (event.keyCode === 13) {\n      if (trimTitle === '') {\n        dispatch(deleteTodo(id));\n      }\n\n      dispatch(changeTitle(trimTitle, id));\n      setTitleTodo(trimTitle);\n      setIsEditing(false);\n    } else if (event.keyCode === 27) {\n      setTitleTodo(title);\n      setIsEditing(false);\n    }\n  };\n\n  const handleBlur = () => {\n    if (titleTodo === '') {\n      dispatch(deleteTodo(id));\n    }\n\n    setIsEditing(false);\n    dispatch(changeTitle(titleTodo.trim(), id));\n    setTitleTodo(titleTodo.trim());\n  };\n\n  return (\n    <li\n      className={classNames(\n        { completed },\n        { editing: isEditing },\n      )}\n      onDoubleClick={() => setIsEditing(true)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={() => dispatch(changeCompletedTodo(id))}\n        />\n        <label>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => dispatch(deleteTodo(id))}\n        />\n      </div>\n      {isEditing && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={titleTodo}\n          onChange={event => setTitleTodo(event.target.value)}\n          onKeyUp={handleKey}\n          autoFocus\n          onBlur={() => handleBlur()}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodosList = ({ todos }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        {...todo}\n      />\n    ))}\n  </ul>\n);\n\nTodosList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from '../store/todos';\n\nexport const TodoForm = () => {\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    dispatch(addTodo(inputValue.trim()));\n    setInputValue('');\n  };\n\n  return (\n    <form onSubmit={event => handleSubmit(event)}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={inputValue}\n        onChange={event => setInputValue(event.target.value)}\n      />\n    </form>\n  );\n};\n","export const FILTER = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FILTER } from './const';\n\nexport const TodosFilter = ({ selectType, setSelectType }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={selectType === FILTER.all ? 'selected' : ''}\n        onClick={() => {\n          setSelectType(FILTER.all);\n        }}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={selectType === FILTER.active ? 'selected' : ''}\n        onClick={() => {\n          setSelectType(FILTER.active);\n        }}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={selectType === FILTER.completed ? 'selected' : ''}\n        onClick={() => {\n          setSelectType(FILTER.completed);\n        }}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  selectType: PropTypes.bool.isRequired,\n  setSelectType: PropTypes.func.isRequired,\n};\n","import { createStore, combineReducers } from 'redux';\nimport { todosReducer } from './todos';\nimport * as selectorsTodos from './todos';\n\nexport const getTodos = state => selectorsTodos.getTodos(state.todos);\nexport const getActiveTodos = state => (\n  selectorsTodos.getActiveTodos(state.todos)\n);\nexport const getCompletedTodos = state => (\n  selectorsTodos.getCompletedTodos(state.todos)\n);\nexport const getActiveTodosLength = state => (\n  selectorsTodos.getActiveTodosLength(state.todos)\n);\nexport const isAllCompleted = state => (\n  selectorsTodos.isAllCompleted(state.todos)\n);\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n});\n\nconst persistedState = localStorage\n  .getItem('reduxState')\n  ? JSON.parse(localStorage.getItem('reduxState'))\n  : {};\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()));\n});\n\nexport default store;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodosList } from './components/TodosList';\nimport { TodoForm } from './components/TodoForm';\nimport { TodosFilter } from './components/TodosFilter';\nimport { FILTER } from './components/const';\nimport { changeCompletedAll, deleteCompletedTodos } from './store/todos';\nimport * as selectors from './store';\n\nexport const TodoApp = () => {\n  const dispatch = useDispatch();\n  const isAllCompleted = useSelector(selectors.isAllCompleted);\n  const activeTodosLength = useSelector(selectors.getActiveTodosLength);\n  const todos = useSelector(selectors.getTodos);\n  const todosActive = useSelector(selectors.getActiveTodos);\n  const todosCompleted = useSelector(selectors.getCompletedTodos);\n\n  const [selectType, setSelectType] = useState(FILTER.all);\n\n  const filterTodos = () => {\n    switch (selectType) {\n      case FILTER.active:\n        return todosActive;\n      case FILTER.completed:\n        return todosCompleted;\n      default:\n        return todos;\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <TodoForm />\n      </header>\n\n      {todos.length !== 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={isAllCompleted}\n              onChange={() => {\n                dispatch(changeCompletedAll(!isAllCompleted));\n              }}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodosList\n              todos={filterTodos()}\n            />\n\n          </section>\n\n          <footer className=\"footer\">\n            {activeTodosLength !== 0 && (\n              <span className=\"todo-count\">\n                {activeTodosLength}\n                {' items left'}\n              </span>\n            )}\n\n            <TodosFilter\n              selectType={selectType}\n              setSelectType={setSelectType}\n              filterTodos={filterTodos}\n            />\n\n            {todosCompleted.length !== 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => {\n                  dispatch(deleteCompletedTodos());\n                }}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n};\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\nimport { TodoApp } from './TodoApp';\nimport store from './store';\n\nrender(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}